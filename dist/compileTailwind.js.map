{"version":3,"file":"compileTailwind.js","sourceRoot":"","sources":["../src/compileTailwind.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAG9B,OAAO,eAAe,MAAM,0BAA0B,CAAC;AACvD,OAAO,IAAI,MAAM,qBAAqB,CAAC;AACvC,OAAO,mBAAmB,MAAM,aAAa,CAAC;AAG9C,MAAM,eAAe,GAAG,CAAC,MAAc,EAAE,GAAW,EAAE,OAA2D,EAAE,EAAE;IACjH,MAAM,IAAI,GAAG,OAAO,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;IAC3D,MAAM,eAAe,GAAG,EAAE,CAAC;IAE3B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;QAC/B,eAAe,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,eAAe,CAAC,MAAM;QAAE,OAAO,IAAI,CAAC;IAEzC,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,EAAE;QACtE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;YACtB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAC5G,OAAO;SACV;QAED,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,OAAO,OAAO,CAAC,CAAC,eAAe,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;iBACzF,OAAO,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;iBACxC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACX,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACV;aAAM;YACH,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YAChE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YAC/B,MAAM,CAAC,MAAM,EAAE,CAAC;YAChB,OAAO,OAAO,CAAC,CAAC,eAAe,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;iBACzF,OAAO,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;iBACrC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;oBACnC,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;iBACpE;gBACD,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;SACV;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import postcss from 'postcss';\nimport type { TransformPluginContext } from 'rollup';\nimport type { Result } from 'postcss-load-config';\nimport discardComments from 'postcss-discard-comments';\nimport safe from 'postcss-safe-parser';\nimport postcssDoubleEscape from './escape.js';\n\n// Compile inline tailwind\nconst compileTailwind = (config: Result, css: string, context: { thisRef: TransformPluginContext; position: any }) => {\n    const root = postcss().process(css, { parser: safe }).root;\n    const applyDirectives = [];\n\n    root.walkAtRules('apply', atRule => {\n        applyDirectives.push({ atRule: atRule, parentRule: atRule.parent });\n    });\n\n    if (!applyDirectives.length) return null;\n\n    const promises = applyDirectives.reverse().map(({ atRule, parentRule }) => {\n        if (!parentRule.selector) {\n            context.thisRef.warn(`Missing selector!`, { line: context.position.line, column: context.position.column });\n            return;\n        }\n\n        if (parentRule.nodes.length === 1) {\n            return postcss([discardComments({ removeAll: true }), ...config.plugins, postcssDoubleEscape])\n                .process(parentRule, { from: undefined })\n                .then(result => {\n                    parentRule.replaceWith(result.root);\n                });\n        } else {\n            const newRule = postcss.rule({ selector: parentRule.selector });\n            newRule.append(atRule.clone());\n            atRule.remove();\n            return postcss([discardComments({ removeAll: true }), ...config.plugins, postcssDoubleEscape])\n                .process(newRule, { from: undefined })\n                .then(result => {\n                    if (!/\\\\\\\\/.test(parentRule.selector)) {\n                        parentRule.selector = parentRule.selector.replace(/\\\\/g, '\\\\\\\\');\n                    }\n                    parentRule.parent.insertAfter(parentRule, result.root);\n                });\n        }\n    });\n\n    return Promise.all(promises).then(() => root.toString());\n};\n\nexport default compileTailwind;\n"]}