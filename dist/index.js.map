{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import postcss, { Plugin as PostcssPlugin } from 'postcss';\nimport postcssConfig from 'postcss-load-config';\nimport discardComments from 'postcss-discard-comments';\nimport { parse } from '@babel/parser';\nimport babelTraverse from '@babel/traverse';\nimport babelGenerator from '@babel/generator';\nimport type traverseType from '@babel/traverse';\nimport type generatorType from '@babel/generator';\nimport type { TransformPluginContext } from 'rollup';\nimport safe from 'postcss-safe-parser';\n\ninterface traverseInterface {\n    default?: typeof traverseType;\n}\ninterface generatorInterface {\n    default?: typeof generatorType;\n}\n\nconst traverse = (babelTraverse as traverseInterface).default;\nconst generate = (babelGenerator as generatorInterface).default;\n\nconst pluginTailwindcssLit = async () => {\n    const config = await postcssConfig();\n\n    // Escape\n    const postcssDoubleEscape: PostcssPlugin = {\n        postcssPlugin: 'postcss-double-escape',\n        OnceExit(root) {\n            root.walkRules(rule => {\n                rule.selectors = rule.selectors.map(selector => {\n                    return selector.replace(/\\\\/g, '\\\\\\\\');\n                });\n            });\n        },\n    };\n\n    // Compile inline tailwind\n    const compileTailwind = (css: string, context: { thisRef: TransformPluginContext; position: any }) => {\n        const root = postcss().process(css, { parser: safe }).root;\n        const applyDirectives = [];\n\n        root.walkAtRules('apply', atRule => {\n            applyDirectives.push({ atRule: atRule, parentRule: atRule.parent });\n        });\n\n        if (!applyDirectives.length) return null;\n\n        const promises = applyDirectives.reverse().map(({ atRule, parentRule }) => {\n            if (!parentRule.selector) {\n                context.thisRef.warn(`Missing selector!`, { line: context.position.line, column: context.position.column });\n                return;\n            }\n\n            if (parentRule.nodes.length === 1) {\n                return postcss([discardComments({ removeAll: true }), ...config.plugins, postcssDoubleEscape])\n                    .process(parentRule, { from: undefined })\n                    .then(result => {\n                        parentRule.replaceWith(result.root);\n                    });\n            } else {\n                const newRule = postcss.rule({ selector: parentRule.selector });\n                newRule.append(atRule.clone());\n                atRule.remove();\n                return postcss([discardComments({ removeAll: true }), ...config.plugins, postcssDoubleEscape])\n                    .process(newRule, { from: undefined })\n                    .then(result => {\n                        if (!/\\\\\\\\/.test(parentRule.selector)) {\n                            parentRule.selector = parentRule.selector.replace(/\\\\/g, '\\\\\\\\');\n                        }\n                        parentRule.parent.insertAfter(parentRule, result.root);\n                    });\n            }\n        });\n\n        return Promise.all(promises).then(() => root.toString());\n    };\n\n    return {\n        name: 'rollup-plugin-tailwindcss-lit',\n        async transform(code, id) {\n            if (id.includes('node_modules')) return null;\n\n            // Extract template content\n            if (id.endsWith('.ts') || id.endsWith('.js')) {\n                const ast = parse(code, { sourceType: 'module' });\n                const taggedTemplate = [];\n\n                traverse(ast, {\n                    TaggedTemplateExpression(path: any) {\n                        if (path.node.tag.name === 'css') taggedTemplate.push(path);\n                    },\n                });\n\n                console.log('processNodes', taggedTemplate.length);\n                if (!taggedTemplate.length) return null;\n                console.log('编译css');\n\n                const twPromises = taggedTemplate.map(async path => {\n                    const originalCSS = generate(path.node.quasi).code.slice(1, -1);\n                    const modifiedCSS = await compileTailwind(originalCSS, {\n                        thisRef: this,\n                        position: path.node.quasi.loc.start,\n                    });\n                    console.log('modifiedCSS', modifiedCSS);\n                    if (modifiedCSS) path.replaceWithSourceString(`css\\`${modifiedCSS}\\``);\n                    return !!modifiedCSS;\n                });\n\n                const res = await Promise.all(twPromises);\n                const allTruthy = res.every(v => !Boolean(v));\n                console.log('res', res);\n                console.log('allTruthy', allTruthy);\n                if (allTruthy) return null;\n\n                const output = generate(ast, { sourceMaps: true, sourceFileName: id });\n                console.log('output');\n\n                return { code: output.code, map: output.map };\n            } else if (id.endsWith('.css')) {\n                // Compile CSS module\n                const result = await postcss([\n                    discardComments({ removeAll: true }),\n                    ...config.plugins,\n                    postcssDoubleEscape,\n                ]).process(code, { from: id, to: id, map: { inline: false, annotation: false } });\n\n                result.messages.forEach(msg => {\n                    if (msg.type === 'dependency') {\n                        this.addWatchFile(msg['file']);\n                    }\n                });\n\n                const csscode = `import { css } from 'lit';\\nconst styles = css\\`${result.css}\\`;\\nexport default styles;`;\n\n                return { code: csscode, map: result.map.toJSON() };\n            }\n\n            return null;\n        },\n    };\n};\n\nexport default pluginTailwindcssLit;\n\n// import type { Result } from 'postcss-load-config';\n// import discardComments from 'postcss-discard-comments';\n\n// import postcssDoubleEscape from './escape.js';\n// import compileTailwind from './compileTailwind.js';\n"]}