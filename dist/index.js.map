{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,OAAoC,MAAM,SAAS,CAAC;AAE3D,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AACnD,OAAO,eAAe,MAAM,0BAA0B,CAAC;AAEvD,MAAM,mBAAmB,GAAkB;IACvC,aAAa,EAAE,uBAAuB;IACtC,IAAI,CAAC,IAAI;QACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC3C,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAC;AAEF,MAAM,oBAAoB,GAAG,GAAW,EAAE;IACtC,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IAE1C,OAAO;QACH,IAAI,EAAE,+BAA+B;QACrC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE;YACpB,IAAI,MAAM,CAAC,EAAE,CAAC,EAAE;gBACZ,MAAM,MAAM,GAAG,MAAM,aAAa,EAAE,CAAC;gBACrC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC;oBACzB,eAAe,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACpC,GAAG,MAAM,CAAC,OAAO;oBACjB,mBAAmB;iBACtB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE;oBACb,IAAI,EAAE,EAAE;oBACR,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE;iBAC5C,CAAC,CAAC;gBAEH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAC1B,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE;wBAC3B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;qBAClC;gBACL,CAAC,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAG,mDAAmD,MAAM,CAAC,GAAG,6BAA6B,CAAC;gBAC3G,OAAO;oBACH,IAAI,EAAE,OAAO;oBACb,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;iBAC7B,CAAC;aACL;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KACJ,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,oBAAoB,CAAC","sourcesContent":["import postcss, { Plugin as PostcssPlugin } from 'postcss';\nimport type { Plugin, TransformResult } from 'rollup';\nimport postcssConfig from 'postcss-load-config';\nimport { createFilter } from '@rollup/pluginutils';\nimport discardComments from 'postcss-discard-comments';\n\nconst postcssDoubleEscape: PostcssPlugin = {\n    postcssPlugin: 'postcss-double-escape',\n    Once(root) {\n        root.walkRules(rule => {\n            rule.selectors = rule.selectors.map(selector => {\n                return selector.replace(/\\\\/g, '\\\\\\\\');\n            });\n        });\n    },\n};\n\nconst pluginTailwindcssLit = (): Plugin => {\n    const filter = createFilter(['**/*.css']);\n\n    return {\n        name: 'rollup-plugin-tailwindcss-lit',\n        async transform(code, id): Promise<TransformResult> {\n            if (filter(id)) {\n                const config = await postcssConfig();\n                const result = await postcss([\n                    discardComments({ removeAll: true }),\n                    ...config.plugins,\n                    postcssDoubleEscape,\n                ]).process(code, {\n                    from: id,\n                    to: id,\n                    map: { inline: false, annotation: false },\n                });\n\n                result.messages.forEach(msg => {\n                    if (msg.type === 'dependency') {\n                        this.addWatchFile(msg['file']);\n                    }\n                });\n\n                const csscode = `import { css } from 'lit';\\nconst styles = css\\`${result.css}\\`;\\nexport default styles;`;\n                return {\n                    code: csscode,\n                    map: result.map.toString(),\n                };\n            }\n            return null;\n        },\n    };\n};\n\nexport default pluginTailwindcssLit;\n"]}