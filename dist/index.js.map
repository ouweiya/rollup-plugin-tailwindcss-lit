{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import postcss from 'postcss';\nimport postcssConfig from 'postcss-load-config';\nimport discardComments from 'postcss-discard-comments';\nimport { parse } from '@babel/parser';\nimport babelTraverse from '@babel/traverse';\nimport babelGenerator from '@babel/generator';\nimport type traverseType from '@babel/traverse';\nimport type generatorType from '@babel/generator';\n\nimport postcssDoubleEscape from './escape.js';\nimport compileTailwind from './inlineTailwind.js';\n\ninterface traverseInterface {\n    default?: typeof traverseType;\n}\ninterface generatorInterface {\n    default?: typeof generatorType;\n}\n\nconst traverse = (babelTraverse as traverseInterface).default;\nconst generate = (babelGenerator as generatorInterface).default;\n\nconst pluginTailwindcssLit = async () => {\n    const config = await postcssConfig();\n\n    return {\n        name: 'rollup-plugin-tailwindcss-lit',\n        async transform(code, id) {\n            if (id.includes('node_modules')) return null;\n\n            // Extract template content\n            if (id.endsWith('.ts') || id.endsWith('.js')) {\n                const ast = parse(code, { sourceType: 'module' });\n                const processNodes = [];\n\n                traverse(ast, {\n                    TaggedTemplateExpression(path: any) {\n                        if (path.node.tag.name === 'css') processNodes.push(path);\n                    },\n                });\n\n                console.log('processNodes', processNodes.length);\n                if (!processNodes.length) return null;\n                console.log('编译css');\n\n                const twPromises = processNodes.map(async path => {\n                    const originalCSS = generate(path.node.quasi).code.slice(1, -1);\n                    const modifiedCSS = await compileTailwind(config, originalCSS, {\n                        thisRef: this,\n                        position: path.node.quasi.loc.start,\n                    });\n                    console.log('modifiedCSS', modifiedCSS);\n                    if (modifiedCSS) path.replaceWithSourceString(`css\\`${modifiedCSS}\\``);\n                    return !!modifiedCSS;\n                });\n\n                const res = await Promise.all(twPromises);\n                const allTruthy = res.every(v => !Boolean(v));\n                console.log('res', res);\n                console.log('allTruthy', allTruthy);\n                if (allTruthy) return null;\n\n                const output = generate(ast, { sourceMaps: true, sourceFileName: id });\n                console.log('output');\n\n                return { code: output.code, map: output.map };\n            } else if (id.endsWith('.css')) {\n                // Compile CSS module\n                const result = await postcss([\n                    discardComments({ removeAll: true }),\n                    ...config.plugins,\n                    postcssDoubleEscape,\n                ]).process(code, { from: id, to: id, map: { inline: false, annotation: false } });\n\n                result.messages.forEach(msg => {\n                    if (msg.type === 'dependency') {\n                        this.addWatchFile(msg['file']);\n                    }\n                });\n\n                const csscode = `import { css } from 'lit';\\nconst styles = css\\`${result.css}\\`;\\nexport default styles;`;\n\n                return { code: csscode, map: result.map.toJSON() };\n            }\n\n            return null;\n        },\n    };\n};\n\nexport default pluginTailwindcssLit;\n\n// import type { Plugin, TransformPluginContext } from 'rollup';\n// import _traverse from '@babel/traverse';\n// import { default  } from '@babel/traverse';\n\n// import _generate from '@babel/generator';\n// import {default as generate } from '@babel/generator';\n"]}